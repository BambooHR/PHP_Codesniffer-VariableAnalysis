<?xml version="1.0"?>
<ruleset name="PHP_Codesniffer Plugins Generic">
 <description>Run ./install.sh and choose from the following rules to your standrd's ruleset.xml.</description>

 <!-- If you want everything, with the defaults, just include this line -->
 <rule ref="Generic.CodeAnalysis.VariableAnalysis"/>
 <!--
    You can also refer to these policy codes to customize them:
      Generic.CodeAnalysis.VariableAnalysis.UndefinedVariable
      Generic.CodeAnalysis.VariableAnalysis.UnusedVariable
      Generic.CodeAnalysis.VariableAnalysis.VariableRedeclaration
      Generic.CodeAnalysis.VariableAnalysis.SelfOutsideClass
 -->

 <!-- Include this block to customize VariableAnalysis behaviour -->
 <rule ref="Generic.CodeAnalysis.VariableAnalysis">
  <properties>
   <!--
      Include the following property if you want to include your own list of pass-by-reference
      functions defined in your codebase.
      Format is "function:argnum" or "function:argnum1,argnum2" etc.
      Whitespace delimits function definitions.
   -->
   <property name="sitePassByRefFunctions" value="
    my_pass_by_ref_function:1
    my_pass_by_ref_function2:2,3
    "/>
   <!--
      Include the following property if you want to prevent exception variables declared
      in a catch block from causing an unused variable warning, this supports the common
      (but not always wanted) pattern of:
        try {
            // stuff here
        } catch (Exception $e) {
            // Do something without ever using $e
        }
   -->
   <property name="allowUnusedCaughtExceptions" value="1"/>
   <!--
      Include the following property if you want to have a whitelist of variable names
      that are commonly used for placeholder "junk" values that ignored and that you
      don't want to provoke an unused variable warning for.
      Format is "variableName" without a leading $ with whitespace delimiting names.
   -->
   <property name="validUnusedVariableNames" value="
    junk
    dummy
    "/>
  </properties>
 </rule>

</ruleset>
